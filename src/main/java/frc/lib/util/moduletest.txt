// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot;

import com.ctre.phoenix6.configs.CANcoderConfiguration;
import com.ctre.phoenix6.configs.MotorOutputConfigs;
import com.ctre.phoenix6.controls.DutyCycleOut;
import com.ctre.phoenix6.hardware.CANcoder;
import com.ctre.phoenix6.hardware.TalonFX;
import com.ctre.phoenix6.signals.InvertedValue;
import com.ctre.phoenix6.signals.SensorDirectionValue;

import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.CommandScheduler;

public class Robot extends TimedRobot {
  private Command m_autonomousCommand;

  private final RobotContainer m_robotContainer;
  private final TalonFX driveMotor = new TalonFX(0);
  private final TalonFX angleMotor = new TalonFX(1);

  private final DutyCycleOut mOut = new DutyCycleOut(0);

  private final XboxController mStick = new XboxController(0);

  private final CANcoder encoder = new CANcoder(0);

  public CANcoderConfiguration swerveCANcoderConfig = new CANcoderConfiguration();


  public Robot() {
    m_robotContainer = new RobotContainer();

    // start with factory-default configs
    var currentConfigs = new MotorOutputConfigs();

    // The left motor is CCW+
    currentConfigs.Inverted = InvertedValue.CounterClockwise_Positive;
    driveMotor.getConfigurator().apply(currentConfigs);

    // The right motor is CW+
    currentConfigs.Inverted = InvertedValue.Clockwise_Positive;
    angleMotor.getConfigurator().apply(currentConfigs);

    swerveCANcoderConfig.MagnetSensor.SensorDirection = SensorDirectionValue.CounterClockwise_Positive;
    encoder.getConfigurator().apply(swerveCANcoderConfig);

  }

  @Override
  public void robotPeriodic() {
    CommandScheduler.getInstance().run();
  }

  @Override
  public void disabledInit() {}

  @Override
  public void disabledPeriodic() {}

  @Override
  public void disabledExit() {}

  @Override
  public void autonomousInit() {
    m_autonomousCommand = m_robotContainer.getAutonomousCommand();

    if (m_autonomousCommand != null) {
      m_autonomousCommand.schedule();
    }
  }

  @Override
  public void autonomousPeriodic() {}

  @Override
  public void autonomousExit() {}

  @Override
  public void teleopInit() {
    if (m_autonomousCommand != null) {
      m_autonomousCommand.cancel();
    }
  }

  @Override
  public void teleopPeriodic() {
    var fwd = -mStick.getLeftY();
    mOut.Output = fwd * 0.25;
    driveMotor.setControl(mOut);
    angleMotor.setControl(mOut);

    SmartDashboard.putNumber("Drive Motor Position", driveMotor.getPosition().getValueAsDouble());
    SmartDashboard.putNumber("Drive Motor Velocity", driveMotor.getVelocity().getValueAsDouble());
    SmartDashboard.putNumber("Angle Motor Position", angleMotor.getPosition().getValueAsDouble());
    SmartDashboard.putNumber("Angle Motor Velocity", angleMotor.getVelocity().getValueAsDouble());

    SmartDashboard.putNumber("CANCoder Angle", encoder.getAbsolutePosition().getValueAsDouble());

  }

  @Override
  public void teleopExit() {}

  @Override
  public void testInit() {
    CommandScheduler.getInstance().cancelAll();
  }

  @Override
  public void testPeriodic() {}

  @Override
  public void testExit() {}
}
